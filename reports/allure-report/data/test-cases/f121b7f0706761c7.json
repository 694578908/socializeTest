{"uid":"f121b7f0706761c7","name":"下单支付","fullName":"TestCases.test_get_request.TestRequest#test_case_nft","historyId":"96cd63d042d1d15dad9c4ab6815265e1","time":{"start":1706090591797,"stop":1706090591872,"duration":75},"status":"failed","statusMessage":"AssertionError","statusTrace":"self = <test_get_request.TestRequest object at 0x0000024C5CEA4B48>\ncase = {'name': '下单支付', 'requests': {'data': {'count': 1, 'distance': '8.61', 'faceValue': '0', 'memberCouponIds': [], ...}, ...', 'url': 'https://asgsaswec.qyfriend.com/api/socialize/member/order/orderBuy'}, 'validate': [{'equals': {'code': 0}}]}\n\n    @allure.feature('接口功能模块')\n    @pytest.mark.parametrize('case', YamlUtil().read_testcase_yaml('test_case.yml', 'nft'))\n    def test_case_nft(self, case):\n>       case_request_response(case)\n\nTestCases\\test_get_request.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncase = {'name': '下单支付', 'requests': {'data': {'count': 1, 'distance': '8.61', 'faceValue': '0', 'memberCouponIds': [], ...}, ...', 'url': 'https://asgsaswec.qyfriend.com/api/socialize/member/order/orderBuy'}, 'validate': [{'equals': {'code': 0}}]}\n\n    def case_request_response(case):\n        count(case)  # 打印用例执行次数\n        if 'name' in case.keys() and 'requests' in case.keys() and 'validate' in case.keys():\n            if jsonpath.jsonpath(case, '$..url') and jsonpath.jsonpath(case, '$..method') \\\n                    and jsonpath.jsonpath(case, '$..data') and jsonpath.jsonpath(case, '$..headers'):\n                allure.dynamic.title(case['name'])\n                replaced_case = read_and_replace_variables(case)\n                title = case['name']\n                headers = case['requests']['headers']\n                url = case['requests']['url']\n                data = case['requests']['data']\n                method = case['requests']['method']\n                result = RequestUtil().send_requests(title, method, url, headers, data)\n                res = json.loads(result)\n                if 'extract' in replaced_case:\n                    extraction_dict = replaced_case['extract']\n                    # 使用extract的表达式提取接口响应参数并写入extract.yml\n                    extract_response_data(extraction_dict, result)\n    \n                log_util.log_info('接口返回预期结果code应为: {}，实际为:{}'.format(case['validate'][0]['equals']['code'], res['code']))\n                allure.attach(json.dumps(data, ensure_ascii=False, indent=2), name=\"请求参数\",\n                              attachment_type=allure.attachment_type.JSON)\n                try:\n>                   assert res['code'] == case['validate'][0]['equals']['code']\nE                   AssertionError\n\ncommon\\get_request.py:34: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"log_data","time":{"start":1706090590251,"stop":1706090590251,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0},{"name":"clear_log","time":{"start":1706090590251,"stop":1706090590251,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0},{"name":"clear_extract_yaml","time":{"start":1706090590251,"stop":1706090590251,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError","statusTrace":"self = <test_get_request.TestRequest object at 0x0000024C5CEA4B48>\ncase = {'name': '下单支付', 'requests': {'data': {'count': 1, 'distance': '8.61', 'faceValue': '0', 'memberCouponIds': [], ...}, ...', 'url': 'https://asgsaswec.qyfriend.com/api/socialize/member/order/orderBuy'}, 'validate': [{'equals': {'code': 0}}]}\n\n    @allure.feature('接口功能模块')\n    @pytest.mark.parametrize('case', YamlUtil().read_testcase_yaml('test_case.yml', 'nft'))\n    def test_case_nft(self, case):\n>       case_request_response(case)\n\nTestCases\\test_get_request.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncase = {'name': '下单支付', 'requests': {'data': {'count': 1, 'distance': '8.61', 'faceValue': '0', 'memberCouponIds': [], ...}, ...', 'url': 'https://asgsaswec.qyfriend.com/api/socialize/member/order/orderBuy'}, 'validate': [{'equals': {'code': 0}}]}\n\n    def case_request_response(case):\n        count(case)  # 打印用例执行次数\n        if 'name' in case.keys() and 'requests' in case.keys() and 'validate' in case.keys():\n            if jsonpath.jsonpath(case, '$..url') and jsonpath.jsonpath(case, '$..method') \\\n                    and jsonpath.jsonpath(case, '$..data') and jsonpath.jsonpath(case, '$..headers'):\n                allure.dynamic.title(case['name'])\n                replaced_case = read_and_replace_variables(case)\n                title = case['name']\n                headers = case['requests']['headers']\n                url = case['requests']['url']\n                data = case['requests']['data']\n                method = case['requests']['method']\n                result = RequestUtil().send_requests(title, method, url, headers, data)\n                res = json.loads(result)\n                if 'extract' in replaced_case:\n                    extraction_dict = replaced_case['extract']\n                    # 使用extract的表达式提取接口响应参数并写入extract.yml\n                    extract_response_data(extraction_dict, result)\n    \n                log_util.log_info('接口返回预期结果code应为: {}，实际为:{}'.format(case['validate'][0]['equals']['code'], res['code']))\n                allure.attach(json.dumps(data, ensure_ascii=False, indent=2), name=\"请求参数\",\n                              attachment_type=allure.attachment_type.JSON)\n                try:\n>                   assert res['code'] == case['validate'][0]['equals']['code']\nE                   AssertionError\n\ncommon\\get_request.py:34: AssertionError","steps":[],"attachments":[{"uid":"4c2a9c8e8d52114d","name":"接口响应时间","source":"4c2a9c8e8d52114d.json","type":"application/json","size":71},{"uid":"a6ace511b95845f2","name":"请求地址","source":"a6ace511b95845f2.json","type":"application/json","size":101},{"uid":"9eed63ba3ca329c4","name":"请求头","source":"9eed63ba3ca329c4.json","type":"application/json","size":261},{"uid":"f7465a98ce05e250","name":"接口响应","source":"f7465a98ce05e250.json","type":"application/json","size":105},{"uid":"19bea87af32c1e83","name":"请求参数","source":"19bea87af32c1e83.json","type":"application/json","size":494},{"uid":"6e6b123a1389b47f","name":"状态Code断言失败","source":"6e6b123a1389b47f.attach","type":"text/plain","size":32},{"uid":"c2c4c1f75798771f","name":"log","source":"c2c4c1f75798771f.txt","type":"text/plain","size":1364}],"parameters":[],"attachmentsCount":7,"shouldDisplayMessage":true,"hasContent":true,"stepsCount":0},"afterStages":[{"name":"clear_log::0","time":{"start":1706090592971,"stop":1706090592971,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0},{"name":"clear_extract_yaml::0","time":{"start":1706090592971,"stop":1706090592971,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0}],"labels":[{"name":"feature","value":"接口功能模块"},{"name":"epic","value":"社交用户端"},{"name":"parentSuite","value":"TestCases"},{"name":"suite","value":"test_get_request"},{"name":"subSuite","value":"TestRequest"},{"name":"host","value":"LYL-20220802ZTE"},{"name":"thread","value":"5764-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"TestCases.test_get_request"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"case"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"f121b7f0706761c7.json","parameterValues":[null]}