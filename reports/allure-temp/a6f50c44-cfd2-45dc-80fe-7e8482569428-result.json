{"name": "下单支付", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <test_get_request.TestRequest object at 0x0000024C5CEA4B48>\ncase = {'name': '下单支付', 'requests': {'data': {'count': 1, 'distance': '8.61', 'faceValue': '0', 'memberCouponIds': [], ...}, ...', 'url': 'https://asgsaswec.qyfriend.com/api/socialize/member/order/orderBuy'}, 'validate': [{'equals': {'code': 0}}]}\n\n    @allure.feature('接口功能模块')\n    @pytest.mark.parametrize('case', YamlUtil().read_testcase_yaml('test_case.yml', 'nft'))\n    def test_case_nft(self, case):\n>       case_request_response(case)\n\nTestCases\\test_get_request.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncase = {'name': '下单支付', 'requests': {'data': {'count': 1, 'distance': '8.61', 'faceValue': '0', 'memberCouponIds': [], ...}, ...', 'url': 'https://asgsaswec.qyfriend.com/api/socialize/member/order/orderBuy'}, 'validate': [{'equals': {'code': 0}}]}\n\n    def case_request_response(case):\n        count(case)  # 打印用例执行次数\n        if 'name' in case.keys() and 'requests' in case.keys() and 'validate' in case.keys():\n            if jsonpath.jsonpath(case, '$..url') and jsonpath.jsonpath(case, '$..method') \\\n                    and jsonpath.jsonpath(case, '$..data') and jsonpath.jsonpath(case, '$..headers'):\n                allure.dynamic.title(case['name'])\n                replaced_case = read_and_replace_variables(case)\n                title = case['name']\n                headers = case['requests']['headers']\n                url = case['requests']['url']\n                data = case['requests']['data']\n                method = case['requests']['method']\n                result = RequestUtil().send_requests(title, method, url, headers, data)\n                res = json.loads(result)\n                if 'extract' in replaced_case:\n                    extraction_dict = replaced_case['extract']\n                    # 使用extract的表达式提取接口响应参数并写入extract.yml\n                    extract_response_data(extraction_dict, result)\n    \n                log_util.log_info('接口返回预期结果code应为: {}，实际为:{}'.format(case['validate'][0]['equals']['code'], res['code']))\n                allure.attach(json.dumps(data, ensure_ascii=False, indent=2), name=\"请求参数\",\n                              attachment_type=allure.attachment_type.JSON)\n                try:\n>                   assert res['code'] == case['validate'][0]['equals']['code']\nE                   AssertionError\n\ncommon\\get_request.py:34: AssertionError"}, "attachments": [{"name": "接口响应时间", "source": "23b353ef-fcfc-472d-a04f-f94a0901baec-attachment.json", "type": "application/json"}, {"name": "请求地址", "source": "dfa7deb2-c224-46d9-988e-1e562c126c07-attachment.json", "type": "application/json"}, {"name": "请求头", "source": "6250aa33-a44e-41ef-81d3-b594e55432bb-attachment.json", "type": "application/json"}, {"name": "接口响应", "source": "22e8739c-85c2-47b7-9079-369cf57a3741-attachment.json", "type": "application/json"}, {"name": "请求参数", "source": "8f22f740-1a02-4963-b798-fe969fffc13f-attachment.json", "type": "application/json"}, {"name": "状态Code断言失败", "source": "1831fcb5-ac54-48b8-9e20-2f80d80dd2d3-attachment.attach"}, {"name": "log", "source": "a156827a-9696-4f1d-8758-11b3b3093467-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case"}], "start": 1706090591797, "stop": 1706090591872, "uuid": "1b4c46f7-80d3-410d-84ec-739e12bd88c3", "historyId": "96cd63d042d1d15dad9c4ab6815265e1", "testCaseId": "bc832219e04208fed8f785d3421ace4d", "fullName": "TestCases.test_get_request.TestRequest#test_case_nft", "labels": [{"name": "feature", "value": "接口功能模块"}, {"name": "epic", "value": "社交用户端"}, {"name": "parentSuite", "value": "TestCases"}, {"name": "suite", "value": "test_get_request"}, {"name": "subSuite", "value": "TestRequest"}, {"name": "host", "value": "LYL-20220802ZTE"}, {"name": "thread", "value": "5764-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestCases.test_get_request"}]}